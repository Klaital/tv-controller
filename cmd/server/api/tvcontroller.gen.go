// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package api

import (
	"fmt"
	"net/http"

	"github.com/gorilla/mux"
)

// CurrentPlaybackSettings defines model for CurrentPlaybackSettings.
type CurrentPlaybackSettings struct {
	Loop               *bool     `json:"loop,omitempty"`
	PlaylistsAvailable *[]string `json:"playlists_available,omitempty"`
	SelectedPlaylist   *string   `json:"selected_playlist,omitempty"`
	Shuffle            *bool     `json:"shuffle,omitempty"`
	VlcPath            *string   `json:"vlc_path,omitempty"`
}

// NewPlaybackSettings defines model for NewPlaybackSettings.
type NewPlaybackSettings struct {
	Loop             *bool   `json:"loop,omitempty"`
	SelectedPlaylist *string `json:"selected_playlist,omitempty"`
	Shuffle          *bool   `json:"shuffle,omitempty"`
	VlcPath          *string `json:"vlc_path,omitempty"`
}

// SelectPlaylistRequest defines model for SelectPlaylistRequest.
type SelectPlaylistRequest struct {
	Playlist *string `json:"playlist,omitempty"`
}

// SetConfigJSONRequestBody defines body for SetConfig for application/json ContentType.
type SetConfigJSONRequestBody = NewPlaybackSettings

// SelectPlaylistJSONRequestBody defines body for SelectPlaylist for application/json ContentType.
type SelectPlaylistJSONRequestBody = SelectPlaylistRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get the current playback settings
	// (GET /cfg)
	GetConfig(w http.ResponseWriter, r *http.Request)
	// Update the playback settings
	// (PUT /cfg)
	SetConfig(w http.ResponseWriter, r *http.Request)
	// toggle eternal playback
	// (PUT /cfg/loop)
	ToggleLoop(w http.ResponseWriter, r *http.Request)
	// select a playlist
	// (PUT /cfg/playlist)
	SelectPlaylist(w http.ResponseWriter, r *http.Request)
	// toggle random playback
	// (PUT /cfg/shuffle)
	ToggleShuffle(w http.ResponseWriter, r *http.Request)
	// Pause or unpause the VLC playback
	// (PUT /ctrl/pause)
	PausePlayback(w http.ResponseWriter, r *http.Request)
	// Skip to the next track in the playlist
	// (PUT /ctrl/trackahead)
	TrackAhead(w http.ResponseWriter, r *http.Request)
	// Skip to the previous track in the playlist.
	// (PUT /ctrl/trackback)
	TrackBack(w http.ResponseWriter, r *http.Request)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// GetConfig operation middleware
func (siw *ServerInterfaceWrapper) GetConfig(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetConfig(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// SetConfig operation middleware
func (siw *ServerInterfaceWrapper) SetConfig(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.SetConfig(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ToggleLoop operation middleware
func (siw *ServerInterfaceWrapper) ToggleLoop(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ToggleLoop(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// SelectPlaylist operation middleware
func (siw *ServerInterfaceWrapper) SelectPlaylist(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.SelectPlaylist(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ToggleShuffle operation middleware
func (siw *ServerInterfaceWrapper) ToggleShuffle(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ToggleShuffle(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PausePlayback operation middleware
func (siw *ServerInterfaceWrapper) PausePlayback(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PausePlayback(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// TrackAhead operation middleware
func (siw *ServerInterfaceWrapper) TrackAhead(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.TrackAhead(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// TrackBack operation middleware
func (siw *ServerInterfaceWrapper) TrackBack(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.TrackBack(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, GorillaServerOptions{})
}

type GorillaServerOptions struct {
	BaseURL          string
	BaseRouter       *mux.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r *mux.Router) http.Handler {
	return HandlerWithOptions(si, GorillaServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r *mux.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, GorillaServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options GorillaServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = mux.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.HandleFunc(options.BaseURL+"/cfg", wrapper.GetConfig).Methods("GET")

	r.HandleFunc(options.BaseURL+"/cfg", wrapper.SetConfig).Methods("PUT")

	r.HandleFunc(options.BaseURL+"/cfg/loop", wrapper.ToggleLoop).Methods("PUT")

	r.HandleFunc(options.BaseURL+"/cfg/playlist", wrapper.SelectPlaylist).Methods("PUT")

	r.HandleFunc(options.BaseURL+"/cfg/shuffle", wrapper.ToggleShuffle).Methods("PUT")

	r.HandleFunc(options.BaseURL+"/ctrl/pause", wrapper.PausePlayback).Methods("PUT")

	r.HandleFunc(options.BaseURL+"/ctrl/trackahead", wrapper.TrackAhead).Methods("PUT")

	r.HandleFunc(options.BaseURL+"/ctrl/trackback", wrapper.TrackBack).Methods("PUT")

	return r
}
