// This file is auto-generated by @hey-api/openapi-ts

import { client, type Options } from '@hey-api/client-fetch';
import type { PausePlaybackError, PausePlaybackResponse, TrackAheadError, TrackAheadResponse, TrackBackError, TrackBackResponse, GetConfigError, GetConfigResponse, SetConfigData, SetConfigError, SetConfigResponse, ToggleShuffleError, ToggleShuffleResponse, ToggleLoopError, ToggleLoopResponse, SelectPlaylistData, SelectPlaylistError, SelectPlaylistResponse } from './types.gen';

/**
 * Pause or unpause the VLC playback
 */
export const pausePlayback = (options?: Options) => { return (options?.client ?? client).put<PausePlaybackResponse, PausePlaybackError>({
    ...options,
    url: '/ctrl/pause'
}); };

/**
 * Skip to the next track in the playlist
 */
export const trackAhead = (options?: Options) => { return (options?.client ?? client).put<TrackAheadResponse, TrackAheadError>({
    ...options,
    url: '/ctrl/trackahead'
}); };

/**
 * Skip to the previous track in the playlist.
 */
export const trackBack = (options?: Options) => { return (options?.client ?? client).put<TrackBackResponse, TrackBackError>({
    ...options,
    url: '/ctrl/trackback'
}); };

/**
 * Get the current playback settings
 */
export const getConfig = (options?: Options) => { return (options?.client ?? client).get<GetConfigResponse, GetConfigError>({
    ...options,
    url: '/cfg'
}); };

/**
 * Update the playback settings
 */
export const setConfig = (options?: Options<SetConfigData>) => { return (options?.client ?? client).put<SetConfigResponse, SetConfigError>({
    ...options,
    url: '/cfg'
}); };

/**
 * toggle random playback
 * toggles the VLC player's current setting, and updates the config db to match the new value
 */
export const toggleShuffle = (options?: Options) => { return (options?.client ?? client).put<ToggleShuffleResponse, ToggleShuffleError>({
    ...options,
    url: '/cfg/shuffle'
}); };

/**
 * toggle eternal playback
 * toggles the VLC player's current setting, and updates the config db to match the new value
 */
export const toggleLoop = (options?: Options) => { return (options?.client ?? client).put<ToggleLoopResponse, ToggleLoopError>({
    ...options,
    url: '/cfg/loop'
}); };

/**
 * select a playlist
 * causes VLC to start playing this playlist, and saves it in the config store to launch as default next time.
 */
export const selectPlaylist = (options?: Options<SelectPlaylistData>) => { return (options?.client ?? client).put<SelectPlaylistResponse, SelectPlaylistError>({
    ...options,
    url: '/cfg/playlist'
}); };